# -*- coding: utf-8 -*-
"""analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NLhhfbZ5AkZ6t6JdDWuDz1rR_zd67FZp
"""

# Import libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import beta
import numpy as np

# Load the dataset from the provided URL
url = "https://raw.githubusercontent.com/dustywhite7/Econ8310/master/AssignmentData/cookie_cats.csv"
data = pd.read_csv(url)

# Inspect column names to ensure correctness
print("Column names:", data.columns)

# If there are leading/trailing spaces in column names, remove them
data.columns = data.columns.str.strip()

# Check for correct column names
print("Cleaned Column names:", data.columns)

# Data cleaning: Ensure retention1 and retention7 are integers
data['retention_1'] = data['retention_1'].astype(int)
data['retention_7'] = data['retention_7'].astype(int)

# Exploratory Data Analysis
print("1-Day Retention Rates by Version:")
print(data.groupby('version')['retention_1'].mean())
print("\n7-Day Retention Rates by Version:")
print(data.groupby('version')['retention_7'].mean())

# Visualizations
sns.barplot(x='version', y='retention_1', data=data)
plt.title("1-Day Retention Rates by Version")
plt.show()

sns.barplot(x='version', y='retention_7', data=data)
plt.title("7-Day Retention Rates by Version")
plt.show()

# Bayesian Analysis
control = data[data['version'] == 'gate_30']
treatment = data[data['version'] == 'gate_40']

# Define alpha and beta for 1-day retention
alpha_control_1 = control['retention_1'].sum() + 1
beta_control_1 = len(control) - control['retention_1'].sum() + 1
alpha_treatment_1 = treatment['retention_1'].sum() + 1
beta_treatment_1 = len(treatment) - treatment['retention_1'].sum() + 1

# Define alpha and beta for 7-day retention
alpha_control_7 = control['retention_7'].sum() + 1
beta_control_7 = len(control) - control['retention_7'].sum() + 1
alpha_treatment_7 = treatment['retention_7'].sum() + 1
beta_treatment_7 = len(treatment) - treatment['retention_7'].sum() + 1

# Posterior distributions for 1-day retention
posterior_control_1 = beta(alpha_control_1, beta_control_1)
posterior_treatment_1 = beta(alpha_treatment_1, beta_treatment_1)

# Posterior distributions for 7-day retention
posterior_control_7 = beta(alpha_control_7, beta_control_7)
posterior_treatment_7 = beta(alpha_treatment_7, beta_treatment_7)

# Visualization of posterior distributions for 1-day retention
x = np.linspace(0, 1, 1000)
plt.plot(x, posterior_control_1.pdf(x), label='Control (Gate 30)')
plt.plot(x, posterior_treatment_1.pdf(x), label='Treatment (Gate 40)')
plt.legend()
plt.title("Posterior Distribution of 1-Day Retention Rates")
plt.show()

# Visualization of posterior distributions for 7-day retention
plt.plot(x, posterior_control_7.pdf(x), label='Control (Gate 30)')
plt.plot(x, posterior_treatment_7.pdf(x), label='Treatment (Gate 40)')
plt.legend()
plt.title("Posterior Distribution of 7-Day Retention Rates")
plt.show()

# Probability comparisons
prob_1_day = posterior_treatment_1.mean() > posterior_control_1.mean()
prob_7_day = posterior_treatment_7.mean() > posterior_control_7.mean()

print(f"Probability that Gate 40 improves 1-day retention: {prob_1_day}")
print(f"Probability that Gate 40 improves 7-day retention: {prob_7_day}")